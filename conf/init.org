  #+TITLE: Emacs Configuration

* Disable DBUS

#+BEGIN_SRC emacs-lisp
  (setq notify-method 'notify-via-message)
#+END_SRC

* User Information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Rein Henrichs")
  (setq user-mail-address "rein.henrichs@gmail.com")
#+END_SRC

* Initialize package.el and use-package

Initialize package.el and use the [[http://melpa.org][MELPA]] package database

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

Bootstrap [[https://github.com/jwiegley/use-package][use-package.el]] with [[https://github.com/emacsattic/bind-key][bind-key]].el and [[http://www.emacswiki.org/emacs/DiminishedModes][diminish.el]]

#+BEGIN_SRC emacs-lisp
  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'diminish)
    (package-refresh-contents)
    (package-install 'diminish))

  (eval-when-compile
    ;; (defvar use-package-verbose t)
    ;; (defvar use-package-expand-minimally t)
    (require 'cl)
    (require 'use-package))

  (require 'bind-key)
  (require 'diminish nil t)
#+END_SRC

* Configuration

** UI/UX

Start with emacs maximized (not full screen).
Source: http://stackoverflow.com/a/18711628.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'toggle-frame-maximized)
      (add-hook 'emacs-startup-hook 'toggle-frame-maximized))
#+END_SRC

No splash screen please.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Only show a menu bar in graphical emacs clients.

#+BEGIN_SRC emacs-lisp
  (when (not (display-graphic-p))
    (menu-bar-mode -1))
#+END_SRC

Shorten confirmation prompts

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use a visual bell.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell t)
#+END_SRC

** Window management

#+BEGIN_SRC emacs-lisp
  (use-package move-border
    :load-path "lib/move-border"
    :defer t
    :commands (move-border-left
               move-border-right
               move-border-up
               move-border-down)
    :bind (("M-S-<up>"    . move-border-up)
           ("M-S-<down>"  . move-border-down)
           ("M-S-<left>"  . move-border-left)
           ("M-S-<right>" . move-border-right)))
#+END_SRC

** UTF-8

Use UTF-8 wherever possible.

#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC

Which means not in =ansi-term=.

#+BEGIN_SRC emacs-lisp
  (defadvice ansi-term (after advise-ansi-term-coding-system)
    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (ad-activate 'ansi-term)
#+END_SRC

** Uniquify

#+BEGIN_SRC emacs-lisp
  (setq uniquify-buffer-name-style (quote post-forward-angle-brackets))
#+END_SRC

** custom.el

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

** Better defaults

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (global-font-lock-mode 1)
  (show-paren-mode 1)
  (line-number-mode 1)
  (column-number-mode 1)
  (size-indication-mode 1)
  (transient-mark-mode 1)
  (delete-selection-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; Default mode settings
  (setq major-mode 'text-mode)
  (setq-default cursor-type 'bar)

  ;; Write backup files to own directory
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; Make backups of files, even when they're in version control
  (setq vc-make-backup-files t)

  ;; Tabs are the devil.
  (set-default 'indent-tabs-mode nil)

  ;; Default indentation
  (setq-default tab-width 2)

  ;; Come on... really?
  (setq sentence-end-double-space nil)

  (setq require-final-newline t)

  ;; Autofill
  (setq comment-auto-fill-only-comments t)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'prog-mode-hook 'turn-on-auto-fill)

  ;; Whitespace
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Fix the PATH

Using [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell.el]]

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (eq window-system 'ns)
    :config
    (progn
      (mapc
       (lambda (variable)
         (add-to-list 'exec-path-from-shell-variables variable))
       '("ALTERNATE_EDITOR"
         "CDPATH"
         "EDITOR"
         "GOPATH"
         "GPG_AGENT_INFO"
         "HISTFILE"
         "INFOPATH"
         "LANG"
         "LC_ALL"
         "SSH_AUTH_SOCK"))
      (exec-path-from-shell-initialize)))
#+END_SRC

* Manage themes

When loading a different theme, first unload the previous theme so
that it doesn’t leave stray customizations behind.

#+BEGIN_SRC emacs-lisp
  (defadvice load-theme (before theme-dont-propagate activate)
    (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC

Load the [[https://github.com/fniessen/emacs-leuven-theme][leuven theme]].

#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :ensure t
    :config
    (progn (load-theme 'leuven t)))
#+END_SRC

Load the [[https://github.com/chriskempson/base16][base16 themes]] and [[https://github.com/syohex/emacs-helm-themes][helm-themes]] for managing them.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme :ensure t :defer 5)
  (use-package helm-themes   :ensure t :defer 5)
#+END_SRC

* Packages
** Languages
*** go

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :init
    (add-hook 'go-mode-hook (lambda () (yas-minor-mode)))
    (add-hook 'before-save-hook #'gofmt-before-save)
    :config
    (use-package go-snippets
      :ensure t)
    (setenv "GOPATH" "/Users/reinh/go")
    (setenv "PATH" (concat (getenv "PATH") ":/Users/reinh/go/bin"))
    (setq exec-path (append exec-path '("/Users/reinh/go/bin")))
    (setenv "PATH" (concat (getenv "PATH") ":/usr/local/opt/go/libexec/bin"))
    (setq exec-path (append exec-path '("/usr/local/opt/go/libexec/bin")))
    (setq gofmt-command "goimports")
    (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
    (load-file "$GOPATH/src/golang.org/x/tools/refactor/rename/rename.el"))
#+END_SRC

*** haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode (("\\.hs\\'"    . haskell-mode)
           ("\\.cabal\\'" . haskell-cabal-mode)
           ("\\.hcr\\'"   . haskell-core-mode))
    :interpreter ("haskell" . haskell-mode)

    :init
    (add-hook 'haskell-mode-hook 'structured-haskell-mode)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook (lambda () (yas-minor-mode)))

    :config
    (require 'haskell)
    (require 'haskell-mode)
    (require 'haskell-interactive-mode)
    (require 'autoinsert)

    (define-skeleton haskell-skeleton
      "Default Haskell file initial contents."
      nil
      "-- | " _ "\n\n"
      "module "
      (haskell-guess-module-name)
      " where\n\n")

    (define-auto-insert "\\.hs" 'haskell-skeleton)

    (defun haskell-auto-insert-module-template ()
    "Insert a module template for the newly created buffer."
    (interactive)
    (when (and (= (point-min)
                  (point-max))
               (buffer-file-name))
      (insert
       "-- | "
       "\n"
       "\n"
       "module "
       )
      (let ((name (haskell-guess-module-name)))
        (if (string= name "")
            (progn (insert "Main")
                   (shm-evaporate (- (point) 5)
                                  (point)))
          (insert name)))
      (insert " where"
              "\n"
              "\n")
      (goto-char (point-min))
      (forward-char 4)))

    (defun haskell-insert-doc ()
      "Insert the documentation syntax."
      (interactive)
      (insert "-- | "))

    (defun haskell-insert-undefined ()
      "Insert undefined."
      (interactive)
      (if (and (boundp 'structured-haskell-mode)
               structured-haskell-mode)
          (shm-insert-string "undefined")
        (insert "undefined")))

    (defun haskell-move-right ()
      (interactive)
      (haskell-move-nested 1))

    (defun haskell-move-left ()
      (interactive)
      (haskell-move-nested -1))

    (defun haskell-who-calls (&optional prompt)
      "Grep the codebase to see who uses the symbol at point."
      (interactive "P")
      (let ((sym (if prompt
                     (read-from-minibuffer "Look for: ")
                   (haskell-ident-at-point))))
        (let ((existing (get-buffer "*who-calls*")))
          (when existing
            (kill-buffer existing)))
        (let ((buffer
               (grep-find (format "cd %s && find . -name '*.hs' -exec grep -inH -e %s {} +"
                                  (haskell-session-current-dir (haskell-session))
                                  sym))))
          (with-current-buffer buffer
            (rename-buffer "*who-calls*")
            (switch-to-buffer-other-window buffer)))))

    (define-key interactive-haskell-mode-map (kbd "M-,") 'haskell-who-calls)
    (define-key interactive-haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
    (define-key interactive-haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    (define-key interactive-haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
    (define-key interactive-haskell-mode-map (kbd "M-.") 'haskell-mode-goto-loc)
    (define-key interactive-haskell-mode-map (kbd "C-?") 'haskell-mode-find-uses)
    (define-key interactive-haskell-mode-map (kbd "C-c C-t") 'haskell-mode-show-type-at)

    (define-key haskell-mode-map (kbd "C-c C-m") 'haskell-navigate-imports)
    (define-key haskell-mode-map (kbd "C-c C-u") 'haskell-insert-undefined)
    (define-key haskell-mode-map (kbd "C-c C-a") 'haskell-insert-doc)
    (define-key haskell-mode-map (kbd "C-<return>") 'haskell-simple-indent-newline-indent)
    (define-key haskell-mode-map (kbd "C-<right>") 'haskell-move-right)
    (define-key haskell-mode-map (kbd "C-<left>") 'haskell-move-left)
    (define-key haskell-mode-map (kbd "<space>") 'haskell-mode-contextual-space)

    (use-package shm
      :ensure t
      :config
      (require 'shm-reformat)
      (require 'shm-case-split)

      (defun shm-contextual-space ()
        "Do contextual space first, and run shm/space if no change in
  the cursor position happened."
        (interactive)
        (if (looking-back "import")
            (call-interactively 'haskell-mode-contextual-space)
          (progn
            (let ((ident (haskell-ident-at-point)))
              (when ident
                (and interactive-haskell-mode
                     (haskell-process-do-try-type ident))))
            (call-interactively 'shm/space))))

      (define-key shm-map (kbd "C-c C-p") 'shm/expand-pattern)
      (define-key shm-map (kbd "C-c C-s") 'shm/case-split)
      (define-key shm-map (kbd "SPC") 'shm-contextual-space)
      (define-key shm-map (kbd "C-\\") 'shm/goto-last-point)
      (define-key shm-map (kbd "C-c C-f") 'shm-fold-toggle-decl)
      (define-key shm-map (kbd "C-c i") 'shm-reformat-decl)
      (custom-set-faces
       '(shm-quarantine-face ((t (:underline (:color "#FF0000" :style wave)))))
       '(shm-current-face ((t (:inherit highlight)))))
      (use-package hindent :ensure t)))
#+END_SRC

*** rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :defer t
    :init (require 'rust-mode))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp
  (use-package rinari :ensure t :defer t)
  (use-package bundler :ensure t :defer t)

  (use-package projectile-rails :ensure t :defer t
    :config
    (add-hook 'projectile-mode-hook 'projectile-rails-on))

  (use-package robe
    :ensure t :defer t
    :init
    (add-to-list 'company-backends 'company-robe)
    :config
    (progn (add-hook 'ruby-mode-hook 'robe-mode)))

  (use-package rspec-mode
    :ensure t :defer t
    :mode rspec-mode
    :config
    (progn (rspec-install-snippets)
           (add-hook 'after-init-hook 'inf-ruby-switch-setup)
           (setq compilation-scroll-output t)))
#+END_SRC

*** LaTeX

#+BEGIN_SRC emacs-lisp
  ;; Basic settings
  (use-package auctex
    :ensure t
    :mode ("\\.tex\\'" . latex-mode)
    :commands (latex-mode LaTeX-mode plain-tex-mode)
    :init
    (progn
      (add-hook 'LaTeX-mode-hook #'LaTeX-preview-setup)
      (add-hook 'LaTeX-mode-hook #'flyspell-mode)
      (add-hook 'LaTeX-mode-hook #'turn-on-reftex)
      (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
      (setq TeX-auto-save t
            TeX-parse-self t
            TeX-save-query nil
            TeX-PDF-mode t
            LaTeX-electric-left-right-brace t
            TeX-electric-sub-and-superscript t
            TeX-insert-braces nil)
      (setq-default TeX-master nil))
    :config
    (add-hook 'plain-TeX-mode-hook
              (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
                              (cons "$" "$"))))
    (add-hook 'LaTeX-mode-hook
              (lambda () (set (make-variable-buffer-local 'TeX-electric-math)
                              (cons "$" "$")))))
#+END_SRC

*** JavaScript

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer t
    :commands js2-mode
    :init
    (progn
      (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
      (setq-default js2-basic-offset 2)
      (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode)))
    :config
    (progn
      (js2-imenu-extras-setup)
      ;; (bind-key "C-x C-e" 'js-send-last-sexp js2-mode-map)
      ;; (bind-key "C-M-x" 'js-send-last-sexp-and-go js2-mode-map)
      ;; (bind-key "C-c b" 'js-send-buffer js2-mode-map)
      ;; (bind-key "C-c C-b" 'js-send-buffer-and-go js2-mode-map)
      ;; (bind-key "C-c w" 'my/copy-javascript-region-or-buffer js2-mode-map)
      ;; (bind-key "C-c l" 'js-load-file-and-go js2-mode-map)
      ))

  (use-package tern
    :ensure t
    :defer t
    :config
    (progn
      (add-hook 'js2-mode-hook 'tern-mode)))

  (use-package company-tern
    :ensure t
    :defer t
    :init (add-to-list 'company-backends 'company-tern))
#+END_SRC

*** Lispen

#+BEGIN_SRC emacs-lisp
  (use-package lisp-mode
    :defer t
    :init
    (progn
      (use-package eldoc
        :commands turn-on-eldoc-mode
        :init (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)))
    :config
    ;; (use-package aggressive-indent :ensure t)
    (defun my-lisp-mode-hook ()
      (paredit-mode 1)::load
      (speed-of-thought-mode 1)
      (local-set-key (kbd "<return>") 'paredit-newline)
      (add-hook 'after-save-hook 'check-parens nil t))
    (add-hook 'lisp-mode-hook 'my-lisp-mode-hook)
    (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)
    ;; (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'emacs-lisp-mode-hook (lambda() (setq mode-name "elisp"))))

  (use-package sotlisp
    :ensure t
    :defer t
    :diminish sotlisp-mode)

  (use-package edit-list :ensure t :defer t :commands edit-list)
#+END_SRC
** misc

#+BEGIN_SRC emacs-lisp
  (use-package pos-tip            :ensure t :defer 5)
  (use-package edit-server        :ensure t :defer 5)
  (use-package gmail-message-mode :ensure t :defer 5)
  (use-package chess              :ensure t :defer 5)
  (use-package narrow-indirect    :ensure t :defer 5)

  (use-package css-mode :ensure t :mode ("\\.css\\'" . css-mode))
  (use-package lua-mode :ensure t :mode ("\\.lua\\'" . lua-mode)
    :interpreter ("lua" . lua-mode))

  (use-package discover
    :ensure t
    :config
    (global-discover-mode 1))

  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :commands paredit-mode)

  (use-package ido
    :ensure t
    :demand t
    :bind (("C-x b" . ido-switch-buffer))
    :config
    (ido-mode t))

  (use-package ido-hacks
    :ensure t
    :disabled t
    :config
    (ido-hacks-mode 1))

  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'")

  (use-package json-mode
    :ensure t
    :mode "\\.json\\'")

  (use-package on-screen
    :ensure t
    :defer 5
    :config
    (on-screen-global-mode 1))

  (use-package smex
    :ensure t
    :demand
    :bind (("M-x" . smex)))

  (use-package rainbow-mode
    :ensure t
    :commands rainbow-mode)

  (use-package twittering-mode
    :ensure t
    :commands twit
    :config
    (setq twittering-use-master-password t)
    (setq twittering-icon-mode t)
    (setq twittering-use-icon-storage t))

  (use-package undo-tree
    :ensure t
    :commands undo-tree-mode
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))

  (use-package w3m
    :disabled t
    :commands (w3m-search w3m-find-file)
    :bind (("C-. u"   . w3m-browse-url)
           ("C-. U"   . w3m-browse-url-new-session))
    :init
    (setq w3m-command "w3m")

    (setq w3m-coding-system 'utf-8
          w3m-file-coding-system 'utf-8
          w3m-file-name-coding-system 'utf-8
          w3m-input-coding-system 'utf-8
          w3m-output-coding-system 'utf-8
          w3m-terminal-coding-system 'utf-8))

  (use-package winner
    :if (not noninteractive)
    :defer 5
    :bind (("M-N" . winner-redo)
           ("M-P" . winner-undo))
    :config
    (winner-mode 1))

  (use-package yaml-mode
    :ensure t
    :mode ("\\.ya?ml\\'" . yaml-mode))

#+END_SRC

** ace-jump-mode

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind (("C-c SPC" . ace-jump-mode))
    :config
    (setq ace-jump-mode-submode-list
          '(ace-jump-char-mode
            ace-jump-word-mode
            ace-jump-line-mode)))
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window))
    :config (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** zapping

#+BEGIN_SRC emacs-lisp
  (use-package zapping
    :load-path "lib/zapping"
    :bind ("M-z" . zap-up-to-char)
    :config
    (define-key isearch-mode-map [(meta z)] 'zap-to-isearch))
#+END_SRC

** ido

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :commands ibuffer
    :bind ("C-x C-b" . ibuffer)
    :config
    (progn
      (setq ibuffer-saved-filter-groups
            '(("Config" (or
                         (filename . ".dots/")
                         (filename . ".emacs.d/")))
              ("Shell"  (or
                         (mode . eshell-mode)
                         (mode . shell-mode)))
              ("Dired"  (mode . dired-mode))
              ("Prose"  (or
                         (mode . tex-mode)
                         (mode . plain-tex-mode)
                         (mode . latex-mode)
                         (mode . rst-mode)
                         (mode . markdown-mode)))
              ("Haskell" (mode . haskell-mode))
              ("Org"    (mode . org-mode))
              ("Gnus"   (or
                         (mode . message-mode)
                         (mode . gnus-group-mode)
                         (mode . gnus-summary-mode)
                         (mode . gnus-article-mode)))
              ("Emacs"  (name . "^\\*.*\\*$"))
              ("Weechat" (name . "^freenode\.")))
            ibuffer-show-empty-filter-groups nil
            ibuffer-expert t)

      (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
        (save-excursion
          (set-buffer "*Ibuffer*")
          (toggle-read-only 0)
          (goto-char 1)
          (search-forward "-\n" nil t)
          (delete-region 1 (point))
          (let ((window-min-height 1))
            ;; save a little screen estate
            (shrink-window-if-larger-than-buffer))
          (toggle-read-only)))
      (ad-activate 'ibuffer-update-title-and-summary)

      ;; Use human readable Size column instead of original one
      (define-ibuffer-column size-h
        (:name "Size" :inline t)
        (cond
         ((> (buffer-size) 1000000) (format "%7.1fM" (/ (buffer-size) 1000000.0)))
         ((> (buffer-size) 100000) (format "%7.0fk" (/ (buffer-size) 1000.0)))
         ((> (buffer-size) 1000) (format "%7.1fk" (/ (buffer-size) 1000.0)))
         (t (format "%8d" (buffer-size)))))

      ;; Modify the default ibuffer-formats
      (setq ibuffer-formats
            '((mark modified read-only " "
                    (name 18 18 :left :elide)
                    " "
                    (size-h 9 -1 :right)
                    " "
                    (mode 16 16 :left :elide)
                    " "
                    filename-and-process)))


      (use-package ibuffer-vc
        :ensure t
        :commands ibuffer-vc-generate-filter-groups-by-vc-root
        :init
        (progn
          (defun nox/ibuffer-apply-filter-groups ()
            "Combine my saved ibuffer filter groups with those generated
       by `ibuffer-vc-generate-filter-groups-by-vc-root'"
            (interactive)
            (setq ibuffer-filter-groups
                  (append (ibuffer-vc-generate-filter-groups-by-vc-root)
                          ibuffer-saved-filter-groups))
            (message "ibuffer-vc: groups set")
            (let ((ibuf (get-buffer "*Ibuffer*")))
              (when ibuf
                (with-current-buffer ibuf
                  (pop-to-buffer ibuf)
                  (ibuffer-update nil t)))))

          (add-hook 'ibuffer-hook 'nox/ibuffer-apply-filter-groups)))
      ))

#+END_SRC

** ag

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :commands (ag ag-regexp)
    :init
    (use-package helm-ag
      :ensure t
      :commands helm-ag))
#+END_SRC

** company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (add-hook 'prog-mode-hook 'company-mode))

  (use-package company-go :ensure t)

  (use-package helm-company
    :ensure t
    :config
    (progn
      (define-key company-mode-map (kbd "C-:") 'helm-company)
      (define-key company-active-map (kbd "C-:") 'helm-company)))

#+END_SRC

** god and evil

*** God mode

[[https://github.com/chrisdone/god-mode][God mode]] is a global minor mode for entering Emacs commands without
modifier keys.

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :ensure t
    :commands god-mode
    :bind ("C-z" . god-local-mode))
#+END_SRC

*** Evil mode

[[http://www.emacswiki.org/emacs/Evil][Evil mode]] is a minor mode providing Vim emulation for Emacs. It
reproduces Vim’s modal editing and even certain Ex commands.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :commands evil-mode
    :config
    (progn
      ;; Override the starting state in a few major modes
      (evil-set-initial-state 'magit-mode 'emacs)
      (evil-set-initial-state 'org-agenda-mode 'emacs)
      (evil-set-initial-state 'package-menu-mode 'motion)
      (evil-set-initial-state 'paradox-menu-mode 'motion)

      ;; Reclaim useful keys from evil-motion-state-map
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil)

      (global-set-key (kbd "RET") 'newline-and-indent)
      (define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word)

      (define-key evil-normal-state-map "Y" (kbd "y$"))))

  (use-package evil-surround
    :ensure t
    :defer 2
    :commands global-evil-surround-mode
    :config (global-evil-surround-mode 1))

#+END_SRC

** gnus

#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :ensure t
    :defer t
    :commands gnus
    :bind (("M-G"   . switch-to-gnus)
           ("C-x m" . compose-mail)))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish helm-mode
    :commands (helm-buffers-list
               helm-colors
               helm-find-files
               helm-for-files
               helm-google-suggest
               helm-mini
               helm-help
               helm-show-kill-ring
               helm-org-keywords
               helm-org-headlines
               helm-projectile
               helm-M-x
               helm-occur)
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x c o" . helm-occur)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)
           ("C-x c b" . my/helm-do-grep-book-notes)
           ("C-x c SPC" . helm-all-mark-rings))

    :init
    (progn
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01  ; this actually updates things
                                          ; reeeelatively quickly.
            helm-yas-display-key-on-candidate t
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :config
    (progn
      (setq helm-M-x-fuzzy-match t)
      (use-package helm-config)
      (define-key helm-map (kbd "C-j") 'helm-next-line)
      (define-key helm-map (kbd "C-k") 'helm-previous-line)))

  (use-package helm-swoop
    :ensure t
    :defer t
    :bind
    (("C-x c s" . helm-swoop)
     ("M-i" . helm-swoop)
     ("M-I" . helm-swoop-back-to-last-point)
     ("C-c M-i" . helm-multi-swoop)
     ("C-x M-i" . helm-multi-swoop-all))
    :config
    (progn
      (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
      (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
    )
#+END_SRC
** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :defer t
    :diminish projectile-mode
    :config
    (progn
      (setq projectile-keymap-prefix (kbd "C-c p"))
      (setq projectile-completion-system 'default)
      (setq projectile-enable-caching t)
      (projectile-global-mode)))

  (use-package helm-projectile :ensure t :defer t)
#+END_SRC

** magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :init
    (setq magit-auto-revert-mode nil)
    (setq magit-last-seen-setup-instructions "1.4.0")
    :config
    (setenv "GIT_PAGER" "")
    ;; full screen magit-status
    ;; From http://whattheemacsd.com/setup-magit.el-01.html
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))

    ;; From http://endlessparentheses.com/easily-create-github-prs-from-magit.html
    (defun endless/visit-pull-request-url ()
      "Visit the current branch's PR on Github."
      (interactive)
      (browse-url
       (format "https://github.com/%s/compare/%s"
               (replace-regexp-in-string
                "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
                (magit-get "remote"
                           (magit-get-current-remote)
                           "url"))
               (magit-get-current-branch))))

    (define-key magit-mode-map (kbd "R")
       #'endless/visit-pull-request-url)

    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\`README\\.md\\'" . gfm-mode)
           ("\\.md\\'"          . markdown-mode)
           ("\\.markdown\\'"    . markdown-mode)))
#+END_SRC

** multiple-cursors

   #+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . mc/mark-previous-like-this)
           ("C-c C-<"     . mc/mark-all-like-this)))
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :defer 2
    :diminish yas-minor-mode
    :config
    (progn
      ;; Suppress excessive log messages
      (setq yas-verbosity 1
            yas-prompt-functions '(yas-ido-prompt)
            yas-snippet-dir (expand-file-name "snippets" user-emacs-directory))
      (yas-global-mode t)))
#+END_SRC

** flycheck and flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :defer 2
    :diminish flycheck-mode " ✓"
    :commands global-flycheck-mode
    :config
    (progn
      (global-flycheck-mode 1)
      (setq-default flycheck-disabled-checkers
                    '(html-tidy
                      emacs-lisp-checkdoc))))

  (use-package flyspell
    :defer 2
    :init
    :config
    (progn
      (setq ispell-program-name "aspell")
      (add-hook 'text-mode-hook 'flyspell-mode)
      (add-hook 'prog-mode-hook 'flyspell-prog-mode)))
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :bind (("<f8>"  . org-cycle-agenda-files)
           ("<f12>" . org-agenda)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c c" . org-capture)
           ("C-c S" . org-store-link)
           ("C-c l" . org-insert-link)
           ("<f5>"   . bh/org-todo)
           ("S-<f5>" . bh/widen)

           ;; Clocking
           ("<f9> I"  . bh/punch-in)
           ("<f9> O"  . bh/punch-out)
           ("<f11>"   . org-clock-goto)
           ("C-<f11>" . org-clock-in))
    :init
    (use-package org-checklist :load-path "lib")
    (use-package org-bullets :ensure t )
    (org-babel-load-file
     (expand-file-name "conf/org.org" user-emacs-directory)))


#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (setq undo-tree-visualizer-diff t
          undo-tree-visualizer-timestamps t))
#+END_SRC

** WeeChat

#+BEGIN_SRC emacs-lisp
  (use-package sauron :ensure t :defer 5)

  (use-package weechat
    :ensure t
    :defer 5
    :init
    (setq notify-method nil)
    :config
    (progn
      (setq weechat-color-list
            '(unspecified "black" "dim gray" "dark red" "red"
                          "dark green" "green" "brown"
                          "orange" "dark blue" "blue"
                          "dark magenta" "magenta" "dark cyan"
                          "royal blue" "dark gray" "gray"))
      (require 'weechat-sauron)
      (require 'weechat-tracking)))
#+END_SRC

** math-symbol-lists

To activate the input method, type =C-u C-\ math RET=. Then, typing
=\mscrC= yields 𝒞, =\lParen= yields ⦅, =\gamma\dot= yields γ̇, etc.

See [[http://www.emacswiki.org/emacs/TeXInputMethod#toc2][emacswiki:TeXInputMethod]]

#+BEGIN_SRC emacs-lisp
  (use-package math-symbol-lists
    :ensure t
    :defer 5
    :config
    (progn
      (quail-define-package "math" "UTF-8" "Ω" t)
      (quail-define-rules ; add whatever extra rules you want to define here...
       ("\\from"    #X2190)
       ("\\to"      #X2192)
       ("\\lhd"     #X22B2)
       ("\\rhd"     #X22B3)
       ("\\unlhd"   #X22B4)
       ("\\unrhd"   #X22B5))
      (mapc (lambda (x)
              (if (cddr x)
                  (quail-defrule (cadr x) (car (cddr x)))))
            (append math-symbol-list-basic math-symbol-list-extended))))
#+END_SRC

** popwin

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :commands popwin-mode
    :defer 2
    :config
    (progn
      (popwin-mode 1)
      (push '("*Org Agenda*" :width 82 :position right :dedicated t :stick t) popwin:special-display-config)
      (push '("*helm*" :height 20) popwin:special-display-config)
      (push '("^\*helm .+\*$" :regexp t :height 20) popwin:special-display-config)
      (push '("*Compile-Log*" :height 20 :noselect t) popwin:special-display-config)
      (push '(" *undo-tree*" :width 0.3 :position right) popwin:special-display-config)))
#+END_SRC

* Comment Line

Comment a single line, from [[http://endlessparentheses.com/implementing-comment-line.html][Endless Parenthesis]]

#+BEGIN_SRC emacs-lisp
  (defun endless/comment-line (n)
    "Comment or uncomment current line and leave point after it.
  With positive prefix, apply to N lines including current one.
  With negative prefix, apply to -N lines above."
    (interactive "p")
    (let ((range (list (line-beginning-position)
                       (goto-char (line-end-position n)))))
      (comment-or-uncomment-region
       (apply #'min range)
       (apply #'max range)))
    (forward-line 1)
    (back-to-indentation))

  (global-set-key (kbd "C-;") #'endless/comment-line)
#+END_SRC

* Re-builder

#+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)
  (put 'downcase-region 'disabled nil)
#+END_SRC
